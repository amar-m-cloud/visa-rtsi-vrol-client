//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.11.01 at 09:57:25 PM GMT 
//


package io.github.brendonfm.visa.dto;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for RTSIQnType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="RTSIQnType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="Chargeback"/>
 *     &lt;enumeration value="Representment"/>
 *     &lt;enumeration value="PreArb"/>
 *     &lt;enumeration value="PreArbResp"/>
 *     &lt;enumeration value="PreComp"/>
 *     &lt;enumeration value="PreCompResp"/>
 *     &lt;enumeration value="ChargebackFinancial"/>
 *     &lt;enumeration value="RepresentmentFinancial"/>
 *     &lt;enumeration value="GoodFaith"/>
 *     &lt;enumeration value="GoodFaithResp"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "RTSIQnType")
@XmlEnum
public enum RTSIQnType {

    @XmlEnumValue("Chargeback")
    CHARGEBACK("Chargeback"),
    @XmlEnumValue("Representment")
    REPRESENTMENT("Representment"),
    @XmlEnumValue("PreArb")
    PRE_ARB("PreArb"),
    @XmlEnumValue("PreArbResp")
    PRE_ARB_RESP("PreArbResp"),
    @XmlEnumValue("PreComp")
    PRE_COMP("PreComp"),
    @XmlEnumValue("PreCompResp")
    PRE_COMP_RESP("PreCompResp"),
    @XmlEnumValue("ChargebackFinancial")
    CHARGEBACK_FINANCIAL("ChargebackFinancial"),
    @XmlEnumValue("RepresentmentFinancial")
    REPRESENTMENT_FINANCIAL("RepresentmentFinancial"),
    @XmlEnumValue("GoodFaith")
    GOOD_FAITH("GoodFaith"),
    @XmlEnumValue("GoodFaithResp")
    GOOD_FAITH_RESP("GoodFaithResp");
    private final String value;

    RTSIQnType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static RTSIQnType fromValue(String v) {
        for (RTSIQnType c: RTSIQnType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
